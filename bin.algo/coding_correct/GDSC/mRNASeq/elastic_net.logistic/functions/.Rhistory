core.info = cisplatin.info[as.character(cisplatin.info$cancer)==core.cancer,]
}
if( calc_cancer == "pan_cancer")
{
core.info = cisplatin.info
#core.cancer = c("CESC","LUAD", "BLCA")
}
if( calc_gene == "gene_set" )
{
pre_genes = read.table(gene_set,header=F,sep="\t",quote="")
cisplatin.dat = map_rna_gene(cisplatin.dat, pre_genes$V1)
}
###functions###
partition_data <- function(obs, k){
#k-fold partition of obs
cv.mat = matrix("NULL",nrow=length(obs),ncol=k)
fd.size = floor(length(obs)/k)
tmp = length(obs)%%k
if(tmp>0)
{
fd.ix = rep(1:tmp,each = (fd.size+1))
fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))
}
if(tmp==0)
{
fd.ix = rep(1:k,each=fd.size)
}
for( j in 1:k)
{
cv.mat[fd.ix!=j,j] = "train"
cv.mat[fd.ix==j,j] = "validation"
}
rownames(cv.mat) = obs
return(cv.mat)
}
partition_data_ass <- function(obs,info)
{
ix = match(obs,info$patient)
cancers = as.character( info$cancer[ix] )
response = as.character( info$response[ix]  )
mat = matrix("NULL",nrow=length(obs), ncol=3 )
mat[,1] = obs
mat[,2] = cancers
mat[,3] = response
rownames(mat) = mat[,1]
return(mat)
}
###load data###
#desktop
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/")
pat.info = read.table("cisplatin.ic50.txt",header=T,sep="\t",quote="")
cisplatin.dat = read.table("en_input_w5.txt",header=T,sep="\t",quote="",row.names=1)
###data preprocess###
##calibration data and patient information
dat.pats = c()
both.ix = c()
for(i in 1:ncol(cisplatin.dat))
{
curr.pat = colnames(cisplatin.dat)[i]
if( !is.na( match(curr.pat,pat.info$patient) )  )
{
#primary.tumor.arr = c(primary.tumor.arr,i)
dat.pats = c(dat.pats,curr.pat)
both.ix = c(both.ix,i)
}
else
{
print(curr.pat)
}
}
cisplatin.dat = cisplatin.dat[,both.ix]
cis.info.delete.ix = c()
for(i in 1:nrow(pat.info))
{
curr.pat = as.character(pat.info$patient[i])
if( is.na(match(curr.pat,dat.pats)))
{
cis.info.delete.ix = c(cis.info.delete.ix,i)
}
}
if(length(cis.info.delete.ix)>0)
{
pat.info = pat.info[-cis.info.delete.ix,]
}
cisplatin.info = pat.info
cisplatin.dat = cisplatin.dat[-((nrow(cisplatin.dat)-12):nrow(cisplatin.dat))]
View(cisplatin.dat)
colnames(cisplatin.dat)[nrow(cisplatin.dat)]
###functions###
partition_data <- function(obs, k){
#k-fold partition of obs
cv.mat = matrix("NULL",nrow=length(obs),ncol=k)
fd.size = floor(length(obs)/k)
tmp = length(obs)%%k
if(tmp>0)
{
fd.ix = rep(1:tmp,each = (fd.size+1))
fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))
}
if(tmp==0)
{
fd.ix = rep(1:k,each=fd.size)
}
for( j in 1:k)
{
cv.mat[fd.ix!=j,j] = "train"
cv.mat[fd.ix==j,j] = "validation"
}
rownames(cv.mat) = obs
return(cv.mat)
}
partition_data_ass <- function(obs,info)
{
ix = match(obs,info$patient)
cancers = as.character( info$cancer[ix] )
response = as.character( info$response[ix]  )
mat = matrix("NULL",nrow=length(obs), ncol=3 )
mat[,1] = obs
mat[,2] = cancers
mat[,3] = response
rownames(mat) = mat[,1]
return(mat)
}
###load data###
#desktop
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/")
pat.info = read.table("cisplatin.ic50.txt",header=T,sep="\t",quote="")
cisplatin.dat = read.table("en_input_w5.txt",header=T,sep="\t",quote="",row.names=1)
###data preprocess###
##calibration data and patient information
dat.pats = c()
both.ix = c()
for(i in 1:ncol(cisplatin.dat))
{
curr.pat = colnames(cisplatin.dat)[i]
if( !is.na( match(curr.pat,pat.info$patient) )  )
{
#primary.tumor.arr = c(primary.tumor.arr,i)
dat.pats = c(dat.pats,curr.pat)
both.ix = c(both.ix,i)
}
else
{
print(curr.pat)
}
}
cisplatin.dat = cisplatin.dat[,both.ix]
cis.info.delete.ix = c()
for(i in 1:nrow(pat.info))
{
curr.pat = as.character(pat.info$patient[i])
if( is.na(match(curr.pat,dat.pats)))
{
cis.info.delete.ix = c(cis.info.delete.ix,i)
}
}
if(length(cis.info.delete.ix)>0)
{
pat.info = pat.info[-cis.info.delete.ix,]
}
cisplatin.info = pat.info
cisplatin.dat = cisplatin.dat[-((nrow(cisplatin.dat)-12):nrow(cisplatin.dat)),]
write.table(cisplatin.dat,"cisplatin.mRNAseq.gdsc.preprocess.txt",quote=F,row.names=T,col.names=T,sep="\t")
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq_fold_cv.gdsc.txt"
output_folder = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/"
create_folder = "test"
test_fold=1
shuffle = 1
input_type = "molecular_only" #NOTICE, input_type and output_type must be afront of source
output_type = "performance"
calc_cancer = "pan_cancer"
calc_gene = "all_gene"
core.cancer = NULL
gene_set = NULL
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/mRNASeq/elastic_net.logistic/")
source("source_all.R")
cisplatin.dat = read.table(data_file,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
test_fold = test_fold + info_col
if( calc_cancer == "sin_cancer")
{
core.info = cisplatin.info[as.character(cisplatin.info$cancer)==core.cancer,]
}
if( calc_cancer == "pan_cancer")
{
core.info = cisplatin.info
#core.cancer = c("CESC","LUAD", "BLCA")
}
if( calc_gene == "gene_set" )
{
pre_genes = read.table(gene_set,header=F,sep="\t",quote="")
cisplatin.dat = map_rna_gene(cisplatin.dat, pre_genes$V1)
}
input_type = "clinical_molecular" #NOTICE, input_type and output_type must be afront of source
output_type!="marker"
#test data
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="validation"])
test.info = core.info[as.character(core.info[,test_fold])=="validation",]
test.dat = as.matrix(cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))])
test.resp = as.character(test.info$response[match(test.pats,as.character(test.info$patient))])
#train data
train.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="train"])
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info[as.character(core.info[,test_fold])=="train",]
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
View(core.ifno)
View(core.info)
core.info$patient
###functions###
partition_data <- function(obs, k){
#k-fold partition of obs
cv.mat = matrix("NULL",nrow=length(obs),ncol=k)
fd.size = floor(length(obs)/k)
tmp = length(obs)%%k
if(tmp>0)
{
fd.ix = rep(1:tmp,each = (fd.size+1))
fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))
}
if(tmp==0)
{
fd.ix = rep(1:k,each=fd.size)
}
for( j in 1:k)
{
cv.mat[fd.ix!=j,j] = "train"
cv.mat[fd.ix==j,j] = "validation"
}
rownames(cv.mat) = obs
return(cv.mat)
}
partition_data_ass <- function(obs,info)
{
ix = match(obs,info$patient)
cancers = as.character( info$cancer[ix] )
response = as.character( info$response[ix]  )
mat = matrix("NULL",nrow=length(obs), ncol=3 )
mat[,1] = obs
mat[,2] = cancers
mat[,3] = response
rownames(mat) = mat[,1]
return(mat)
}
###load data###
#desktop
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/")
pat.info = read.table("cisplatin.ic50.txt",header=T,sep="\t",quote="")
cisplatin.dat = read.table("en_input_w5.txt",header=T,sep="\t",quote="",row.names=1)
###data preprocess###
##calibration data and patient information
dat.pats = c()
both.ix = c()
for(i in 1:ncol(cisplatin.dat))
{
curr.pat = colnames(cisplatin.dat)[i]
if( !is.na( match(curr.pat,pat.info$patient) )  )
{
#primary.tumor.arr = c(primary.tumor.arr,i)
dat.pats = c(dat.pats,curr.pat)
both.ix = c(both.ix,i)
}
else
{
print(curr.pat)
}
}
cisplatin.dat = cisplatin.dat[,both.ix]
cis.info.delete.ix = c()
for(i in 1:nrow(pat.info))
{
curr.pat = as.character(pat.info$patient[i])
if( is.na(match(curr.pat,dat.pats)))
{
cis.info.delete.ix = c(cis.info.delete.ix,i)
}
}
if(length(cis.info.delete.ix)>0)
{
pat.info = pat.info[-cis.info.delete.ix,]
}
cisplatin.info = pat.info
#delete the tissue type
cisplatin.dat = cisplatin.dat[-((nrow(cisplatin.dat)-12):nrow(cisplatin.dat)),]
####data partition for each CV in 5-fold CV#####
###core cancer###
#define core cancer
tmp.df = data.frame(table(pat.info$cancer))
tmp.df = tmp.df[order(tmp.df[,2],decreasing=T),]
View(tmp.df)
####partition data into 10-fold#####
##partition every cancer type into 5-fold##
all_res = list()
for( all in 1:20)
{
k=5
partition_res = matrix("NULL",nrow=1,ncol=5+3)
partition_pre = matrix( 0,ncol=1,nrow=nrow(cisplatin.info) )
#cancer type
mytable = table(cisplatin.info$cancer)
mytable = mytable[mytable>0]
cancer_type = names(mytable)
#start to partition, meanwhile keep ratio of sensitive and insensitive
for( i in 1:length(cancer_type) )
{
curr_info = cisplatin.info[as.character(cisplatin.info$cancer)==cancer_type[i],]
pat_num = nrow(curr_info)
pats = as.character(curr_info$patient)
#sen_mat = partition_data(sen_pats,k)
#insen_mat = partition_data(insen_pats,k)
#pats_mat = rbind(sen_mat,insen_mat)
pats_mat = partition_data(pats,k)
#add information
mat_info = partition_data_ass(rownames(pats_mat),curr_info)
mat_res = cbind(mat_info,pats_mat)
partition_res = rbind(partition_res,mat_res)
}
partition_res = partition_res[-1,]
#   for(i in 1:nrow(partition_res))
#   {
#     curr_pat = partition_res[i,1]
#     curr_cancer = partition_res[i,2]
#     #tmp = unlist(strsplit(curr_pat,split="\\-"))
#     #tmp = paste(curr_cancer,tmp[1],tmp[2],tmp[3],"01",sep=".")
#     partition_res[i,1] = paste(curr_cancer,curr_pat)
#   }
colnames(partition_res) = c("patient","cancer","response",as.character(seq(1,k,by=1)))
all_res[[all]] = partition_res
}
#merge all the partition results
partition_res = matrix("NULL",nrow=nrow(all_res[[1]]),ncol=100+3)
pats = all_res[[1]][,1]
rownames(all_res[[1]]) = NULL
for(all in 2:20)
{
all_res[[all]] = all_res[[all]][match(pats,all_res[[all]][,1]),]
all_res[[all]] = all_res[[all]][,-c(1,2,3)]
rownames(all_res[[all]]) = NULL
}
partition_res = do.call(cbind,all_res)
###output
write.table(cisplatin.dat,"cisplatin.mRNAseq.gdsc.preprocess.txt",quote=F,row.names=T,col.names=T,sep="\t")
write.table(partition_res,"cisplatin.mRNAseq_fold_cv.gdsc.txt",col.names=T,row.names=F,sep="\t",quote=F)
?glm
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq_fold_cv.gdsc.txt"
output_folder = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/"
create_folder = "test"
test_fold=1
shuffle = 1
input_type = "clinical_molecular" #NOTICE, input_type and output_type must be afront of source
output_type = "performance"
calc_cancer = "pan_cancer"
calc_gene = "all_gene"
core.cancer = NULL
gene_set = NULL
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/mRNASeq/elastic_net.logistic/")
source("source_all.R")
cisplatin.dat = read.table(data_file,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
test_fold = test_fold + info_col
if( calc_cancer == "sin_cancer")
{
core.info = cisplatin.info[as.character(cisplatin.info$cancer)==core.cancer,]
}
if( calc_cancer == "pan_cancer")
{
core.info = cisplatin.info
#core.cancer = c("CESC","LUAD", "BLCA")
}
if( calc_gene == "gene_set" )
{
pre_genes = read.table(gene_set,header=F,sep="\t",quote="")
cisplatin.dat = map_rna_gene(cisplatin.dat, pre_genes$V1)
}
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="validation"])
test.info = core.info[as.character(core.info[,test_fold])=="validation",]
test.dat = as.matrix(cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))])
test.resp = as.character(test.info$response[match(test.pats,as.character(test.info$patient))])
#train data
train.pats = as.character(core.info$patient)
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
filter_low_exp == TRUE
if( filter_low_exp == TRUE )
{
data.tmp = filter_mRNA(cisplatin.dat, train.pats, test.pats,
low.thresh="Q1", type="dispersion" )
train.dat = data.tmp[[1]]; test.dat = data.tmp[[2]]
}
##normalization in each cancer##
if( exp_normalize == TRUE )
{
data.tmp = exp_norm(cbind(train.dat,test.dat), train.pats, test.pats, cisplatin.info)
train.dat = data.tmp[[1]]
test.dat = data.tmp[[2]]
}
exp_normalize == TRUE
find_diff_genes == TRUE
train_dat = train.dat; test_dat = test.dat; info = cisplatin.info
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = as.numeric(info$response[match(train_pats,as.character(info$patient))])
train_pats
train.ifno
View(train.info)
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="validation"])
test.info = core.info[as.character(core.info[,test_fold])=="validation",]
test.dat = as.matrix(cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))])
test.resp = as.character(test.info$response[match(test.pats,as.character(test.info$patient))])
#train data
train.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="train"])
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info[as.character(core.info[,test_fold])=="train",]
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
View(train.info)
info = train.info
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = as.numeric(info$response[match(train_pats,as.character(info$patient))])
length(train_pats)
length(cancers)
dim(train.dat)
train_dat = train.dat
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = as.numeric(info$response[match(train_pats,as.character(info$patient))])
train_dat
length(train_pats)
length(cancers)
length(responses)
View(responses)
responses = info$response[match(train_pats,as.character(info$patient))]
View(responses)
is.numeric(responses)
mode(responses)
mode(responses)
is.numeric(responses)
is.factor(responses)
a = as.numeric(responses)
View(a)
a = as.vector(responses)
View(a)
mode(a)
a = as.numeric(a)
View(a)
View(responses)
desktop
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq_fold_cv.gdsc.txt"
output_folder = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/"
create_folder = "test"
test_fold=1
shuffle = 1
input_type = "clinical_molecular" #NOTICE, input_type and output_type must be afront of source
output_type = "performance"
calc_cancer = "pan_cancer"
calc_gene = "all_gene"
core.cancer = NULL
gene_set = NULL
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/mRNASeq/elastic_net.logistic/")
source("source_all.R")
cisplatin.dat = read.table(data_file,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
test_fold = test_fold + info_col
###preprocess data###
#core.info = cisplatin.info[as.character(cisplatin.info$cancer) %in% core.cancer,]
if( calc_cancer == "sin_cancer")
{
core.info = cisplatin.info[as.character(cisplatin.info$cancer)==core.cancer,]
}
if( calc_cancer == "pan_cancer")
{
core.info = cisplatin.info
#core.cancer = c("CESC","LUAD", "BLCA")
}
if( calc_gene == "gene_set" )
{
pre_genes = read.table(gene_set,header=F,sep="\t",quote="")
cisplatin.dat = map_rna_gene(cisplatin.dat, pre_genes$V1)
}
output_type!="marker"
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="validation"])
test.info = core.info[as.character(core.info[,test_fold])=="validation",]
test.dat = as.matrix(cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))])
test.resp = as.character(test.info$response[match(test.pats,as.character(test.info$patient))])
#train data
train.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="train"])
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info[as.character(core.info[,test_fold])=="train",]
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
train_dat = train.dat; info=train.info; test_dat = test.dat
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = info$response[match(train_pats,as.character(info$patient))]
length(train_pats)
responses = as.vector(info$response[match(train_pats,as.character(info$patient))])
responses = as.numeric(responses)
View(responses)
p_values = vector( length=nrow(train_dat),mode="numeric" )
fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=gaussian)
i=1
fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=gaussian)
sum_fit = summary(fit)
sum_fit$coefficients
coeff = sum_fit$coefficients
coeff[2,ncol(coeff)]
