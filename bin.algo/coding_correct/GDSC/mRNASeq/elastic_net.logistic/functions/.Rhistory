train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
filter_low_exp == TRUE
if( filter_low_exp == TRUE )
{
data.tmp = filter_mRNA(cisplatin.dat, train.pats, test.pats,
low.thresh="Q1", type="dispersion" )
train.dat = data.tmp[[1]]; test.dat = data.tmp[[2]]
}
##normalization in each cancer##
if( exp_normalize == TRUE )
{
data.tmp = exp_norm(cbind(train.dat,test.dat), train.pats, test.pats, cisplatin.info)
train.dat = data.tmp[[1]]
test.dat = data.tmp[[2]]
}
exp_normalize == TRUE
find_diff_genes == TRUE
train_dat = train.dat; test_dat = test.dat; info = cisplatin.info
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = as.numeric(info$response[match(train_pats,as.character(info$patient))])
train_pats
train.ifno
View(train.info)
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="validation"])
test.info = core.info[as.character(core.info[,test_fold])=="validation",]
test.dat = as.matrix(cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))])
test.resp = as.character(test.info$response[match(test.pats,as.character(test.info$patient))])
#train data
train.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="train"])
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info[as.character(core.info[,test_fold])=="train",]
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
View(train.info)
info = train.info
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = as.numeric(info$response[match(train_pats,as.character(info$patient))])
length(train_pats)
length(cancers)
dim(train.dat)
train_dat = train.dat
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = as.numeric(info$response[match(train_pats,as.character(info$patient))])
train_dat
length(train_pats)
length(cancers)
length(responses)
View(responses)
responses = info$response[match(train_pats,as.character(info$patient))]
View(responses)
is.numeric(responses)
mode(responses)
mode(responses)
is.numeric(responses)
is.factor(responses)
a = as.numeric(responses)
View(a)
a = as.vector(responses)
View(a)
mode(a)
a = as.numeric(a)
View(a)
View(responses)
desktop
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq_fold_cv.gdsc.txt"
output_folder = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/"
create_folder = "test"
test_fold=1
shuffle = 1
input_type = "clinical_molecular" #NOTICE, input_type and output_type must be afront of source
output_type = "performance"
calc_cancer = "pan_cancer"
calc_gene = "all_gene"
core.cancer = NULL
gene_set = NULL
setwd("C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/mRNASeq/elastic_net.logistic/")
source("source_all.R")
cisplatin.dat = read.table(data_file,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
test_fold = test_fold + info_col
###preprocess data###
#core.info = cisplatin.info[as.character(cisplatin.info$cancer) %in% core.cancer,]
if( calc_cancer == "sin_cancer")
{
core.info = cisplatin.info[as.character(cisplatin.info$cancer)==core.cancer,]
}
if( calc_cancer == "pan_cancer")
{
core.info = cisplatin.info
#core.cancer = c("CESC","LUAD", "BLCA")
}
if( calc_gene == "gene_set" )
{
pre_genes = read.table(gene_set,header=F,sep="\t",quote="")
cisplatin.dat = map_rna_gene(cisplatin.dat, pre_genes$V1)
}
output_type!="marker"
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="validation"])
test.info = core.info[as.character(core.info[,test_fold])=="validation",]
test.dat = as.matrix(cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))])
test.resp = as.character(test.info$response[match(test.pats,as.character(test.info$patient))])
#train data
train.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="train"])
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info[as.character(core.info[,test_fold])=="train",]
train.dat = as.matrix(cisplatin.dat[,match(train.pats,colnames(cisplatin.dat))])
train_dat = train.dat; info=train.info; test_dat = test.dat
train_pats = colnames(train_dat)
cancers = as.character(info$cancer[match(train_pats,as.character(info$patient))])
cancers = as.factor(cancers)
responses = info$response[match(train_pats,as.character(info$patient))]
length(train_pats)
responses = as.vector(info$response[match(train_pats,as.character(info$patient))])
responses = as.numeric(responses)
View(responses)
p_values = vector( length=nrow(train_dat),mode="numeric" )
fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=gaussian)
i=1
fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=gaussian)
sum_fit = summary(fit)
sum_fit$coefficients
coeff = sum_fit$coefficients
coeff[2,ncol(coeff)]
###libraries###
library(reshape2)
library(ggplot2)
library(plyr)
library(gplots)
library(NMF)
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq_fold_cv.gdsc.txt"
gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/results/marker_molecular_only.txt"
#gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/cgp.2012.txt"
#gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/gdsc.txt"
#miRNA molecular only#
# gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/results/present_results/miRNAseq/marker_gene/marker_molecular_only.txt"
# dat_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/miRNAseq/cisplatin.miRNAseq.gdac_20141206.preprocess.txt"
# info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/miRNAseq/cisplatin.miRNAseq_fold_cv.mat.txt"
##cluster##
genes_pre = read.table(gene_file,header=F,row.names=NULL,sep="\t",quote="")
cisplatin.dat = read.table(dat_file ,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
freq_thresh = 0.8
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
cisplatin.dat = read.table(data_file ,header=T,row.names=1,sep="\t",quote="")
pats_cancer = cisplatin.info$cancer[match(pats,cisplatin.info$patient)]
pats = colnames(cisplatin.dat)
pats_cancer = cisplatin.info$cancer[match(pats,cisplatin.info$patient)]
genes = genes_pre[,1][genes_pre[,2]>=freq_thresh]
genes
cancer_ix = which(genes %in% unique(pats_cancer))
if(length(cancer_ix)>0)
{
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
rownames(cancer_mat) = genes[cancer_ix]
colnames(cancer_mat) = colnames(cisplatin.dat)
}
gene_ix = match(genes,rownames(cisplatin.dat))
#gene_ix = match(genes,dat_genes)
gene_ix = gene_ix[!is.na(gene_ix)]
length(cancer_ix)>0
length(cancer_ix)
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
which(genes[cancer_ix[i]])
genes[cancer_ix[i]]
pats_cancer
pats = as.character(colnames(cisplatin.dat))
pats_cancer = as.character(cisplatin.info$cancer[match(pats,cisplatin.info$patient)])
# dat_genes = strsplit(rownames(cisplatin.dat),"\\|")
# dat_genes = unlist(lapply(dat_genes,function(x){return(x[[1]][1])}))
# genes = genes_pre[,1][genes_pre[,1] %in% dat_genes]
genes = genes_pre[,1][genes_pre[,2]>=freq_thresh]
cancer_ix = which(genes %in% unique(pats_cancer))
genes
genes = as.character(genes_pre[,1][genes_pre[,2]>=freq_thresh])
cancer_ix = which(genes %in% unique(pats_cancer))
cancer_ux
cancer_ix
if(length(cancer_ix)>0)
{
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
rownames(cancer_mat) = genes[cancer_ix]
colnames(cancer_mat) = colnames(cisplatin.dat)
}
gene_ix = match(genes,rownames(cisplatin.dat))
#gene_ix = match(genes,dat_genes)
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
if(length(cancer_ix)>0)
{
pre_dat = rbind(pre_dat,cancer_mat)
}
resp = cisplatin.info$response[match(colnames(cisplatin.dat),cisplatin.info$patient)]
resp = as.numeric(as.vector(resp))
resp_sort = sort(resp,index=T)
resp_sort
resp = cisplatin.info$response[match(colnames(cisplatin.dat),cisplatin.info$patient)]
resp
mode(resp)
resp = as.vector(resp)
View(resp)
mode(resp)
resp_sort = sort(resp,index=T)
View(resp_sort)
View(pre_dat)
resp = resp_sort$x
pre_dat = pre_dat[,resp_sort$ix]
pats_cancer = pats_cancer[resp_sort$ix]
View(pats_cancer)
colAnno = data.frame(response=resp,cancer=pats_cancer)
row_lab.list = strsplit(rownames(final_dat),"\\|")
row_lab = unlist(lapply(row_lab.list,function(x){return(x[[1]][1])}))
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),scale="row",legend=F)
final_dat = pre_dat
View(final_dat)
colAnno = data.frame(response=resp,cancer=pats_cancer)
row_lab = rownames(final_dat)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),scale="row",legend=F)
colAnno = data.frame(IC50=resp,cancer=pats_cancer)
row_lab = rownames(final_dat)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),scale="row",legend=F)
cancer_type = unique(pats_cancer)
i = 4
ix = which(pats_cancer==cancer_type[i])
colAnno = data.frame(response=resp[ix],cancer=pats_cancer[ix])
aheatmap(final_dat[,ix],annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),scale="row",legend=F)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),scale=NULL,legend=F)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F)
colAnno = data.frame(response=resp[ix],cancer=pats_cancer[ix])
aheatmap(final_dat[,ix],annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),scale="row",legend=F)
aheatmap(final_dat[,ix],annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F)
genes_pre = read.table(gene_file,header=F,row.names=NULL,sep="\t",quote="")
cisplatin.dat = read.table(data_file ,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
freq_thresh = 0.8
###preprocess data###
##find data##
# pats = strsplit(colnames(cisplatin.dat),"\\.")
# pats_cancer = unlist(lapply(pats,function(x){return(x[[1]][1])}))
pats = as.character(colnames(cisplatin.dat))
pats_cancer = as.character(cisplatin.info$cancer[match(pats,cisplatin.info$patient)])
# dat_genes = strsplit(rownames(cisplatin.dat),"\\|")
# dat_genes = unlist(lapply(dat_genes,function(x){return(x[[1]][1])}))
# genes = genes_pre[,1][genes_pre[,1] %in% dat_genes]
genes = as.character(genes_pre[,1][genes_pre[,2]>=freq_thresh])
cancer_ix = which(genes %in% unique(pats_cancer))
if(length(cancer_ix)>0)
{
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
rownames(cancer_mat) = genes[cancer_ix]
colnames(cancer_mat) = colnames(cisplatin.dat)
}
gene_ix = match(genes,rownames(cisplatin.dat))
#gene_ix = match(genes,dat_genes)
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
if(length(cancer_ix)>0)
{
pre_dat = rbind(pre_dat,cancer_mat)
}
resp = cisplatin.info$response[match(colnames(cisplatin.dat),cisplatin.info$patient)]
resp = as.vector(resp)
resp_sort = sort(resp,index=T)
resp = resp_sort$x
pre_dat = pre_dat[,resp_sort$ix]
pats_cancer = pats_cancer[resp_sort$ix]
final_dat = pre_dat
colAnno = data.frame(IC50=resp,cancer=pats_cancer)
row_lab = rownames(final_dat)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F)
?aheatmap
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F,scale="none")
gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/cgp.2012.txt"
#gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/cgp.2012.txt"
#
genes_pre = read.table(gene_file,header=F,row.names=NULL,sep="\t",quote="")
freq_thresh = 0.8
pats = as.character(colnames(cisplatin.dat))
pats_cancer = as.character(cisplatin.info$cancer[match(pats,cisplatin.info$patient)])
genes = as.character(genes_pre[,1][genes_pre[,2]>=freq_thresh])
genes
cancer_ix = which(genes %in% unique(pats_cancer))
if(length(cancer_ix)>0)
{
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
rownames(cancer_mat) = genes[cancer_ix]
colnames(cancer_mat) = colnames(cisplatin.dat)
}
gene_ix = match(genes,rownames(cisplatin.dat))
#gene_ix = match(genes,dat_genes)
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
if(length(cancer_ix)>0)
{
pre_dat = rbind(pre_dat,cancer_mat)
}
resp = cisplatin.info$response[match(colnames(cisplatin.dat),cisplatin.info$patient)]
resp = as.vector(resp)
resp_sort = sort(resp,index=T)
resp = resp_sort$x
pre_dat = pre_dat[,resp_sort$ix]
pats_cancer = pats_cancer[resp_sort$ix]
final_dat = pre_dat
colAnno = data.frame(IC50=resp,cancer=pats_cancer)
row_lab = rownames(final_dat)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F,scale="none")
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F,scale="row")
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F,scale="r1")
gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/results/marker_molecular_only.txt"
genes_pre = read.table(gene_file,header=F,row.names=NULL,sep="\t",quote="")
pats = as.character(colnames(cisplatin.dat))
pats_cancer = as.character(cisplatin.info$cancer[match(pats,cisplatin.info$patient)])
# dat_genes = strsplit(rownames(cisplatin.dat),"\\|")
# dat_genes = unlist(lapply(dat_genes,function(x){return(x[[1]][1])}))
# genes = genes_pre[,1][genes_pre[,1] %in% dat_genes]
genes = as.character(genes_pre[,1][genes_pre[,2]>=freq_thresh])
cancer_ix = which(genes %in% unique(pats_cancer))
if(length(cancer_ix)>0)
{
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
rownames(cancer_mat) = genes[cancer_ix]
colnames(cancer_mat) = colnames(cisplatin.dat)
}
gene_ix = match(genes,rownames(cisplatin.dat))
#gene_ix = match(genes,dat_genes)
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
if(length(cancer_ix)>0)
{
pre_dat = rbind(pre_dat,cancer_mat)
}
resp = cisplatin.info$response[match(colnames(cisplatin.dat),cisplatin.info$patient)]
resp = as.vector(resp)
resp_sort = sort(resp,index=T)
resp = resp_sort$x
pre_dat = pre_dat[,resp_sort$ix]
pats_cancer = pats_cancer[resp_sort$ix]
final_dat = pre_dat
###draw heatmap###
colAnno = data.frame(IC50=resp,cancer=pats_cancer)
row_lab = rownames(final_dat)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F,scale="r1")
df = data.frame(pats_cancer,resp,
t(final_dat[match("PRRG2",rownames(final_dat)),]))
colnames(df) = c("cancer","response","NQO1")
ggplot(df,aes(y=NQO1,x=cancer)) + geom_boxplot(aes(fill=response))
gene = "MAGEA4"
df = data.frame(pats_cancer,resp,
t(final_dat[match(gene,rownames(final_dat)),]))
colnames(df) = c("cancer","response",gene)
ggplot(df,aes(y=gene,x=cancer)) + geom_boxplot(aes(fill=response))
ggplot(df,aes(y=MAGEA4,x=cancer)) + geom_boxplot(aes(fill=response))
df = data.frame(pats_cancer,resp,
t(final_dat[match(gene,rownames(final_dat)),]))
colnames(df) = c("cancer","response",gene)
View(df)
View(df)
###libraries###
library(reshape2)
library(ggplot2)
library(plyr)
library(gplots)
library(NMF)
###output data###
pdf("cisplatin.mRNA.litmining_marker.combine.pdf",width=14,height=7)
###load data###
##desktop##
#mRNA#
data_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq.gdsc.preprocess.txt"
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/data/cisplatin.mRNAseq_fold_cv.gdsc.txt"
gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/pan-cancer-drug-response/bin.algo/coding_correct/GDSC/results/marker_molecular_only.txt"
#gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/cgp.2012.txt"
#gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/cgp.2012.txt"
#gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/gene_sets/gdsc.txt"
#miRNA molecular only#
# gene_file = "C:/Users/zding/workspace/projects/drug_sensitivity/results/present_results/miRNAseq/marker_gene/marker_molecular_only.txt"
# dat_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/miRNAseq/cisplatin.miRNAseq.gdac_20141206.preprocess.txt"
# info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/miRNAseq/cisplatin.miRNAseq_fold_cv.mat.txt"
##cluster##
##both##
genes_pre = read.table(gene_file,header=F,row.names=NULL,sep="\t",quote="")
cisplatin.dat = read.table(data_file ,header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table(info_file,sep="\t",header=T,quote="")
freq_thresh = 0.8
###preprocess data###
##find data##
# pats = strsplit(colnames(cisplatin.dat),"\\.")
# pats_cancer = unlist(lapply(pats,function(x){return(x[[1]][1])}))
pats = as.character(colnames(cisplatin.dat))
pats_cancer = as.character(cisplatin.info$cancer[match(pats,cisplatin.info$patient)])
# dat_genes = strsplit(rownames(cisplatin.dat),"\\|")
# dat_genes = unlist(lapply(dat_genes,function(x){return(x[[1]][1])}))
# genes = genes_pre[,1][genes_pre[,1] %in% dat_genes]
genes = as.character(genes_pre[,1][genes_pre[,2]>=freq_thresh])
cancer_ix = which(genes %in% unique(pats_cancer))
if(length(cancer_ix)>0)
{
cancer_mat = matrix(NA,nrow=length(cancer_ix),ncol=length(pats_cancer))
for(i in 1:length(cancer_ix))
{
cancer_mat[i,which(genes[cancer_ix[i]]==pats_cancer)] = 1
cancer_mat[i,which(genes[cancer_ix[i]]!=pats_cancer)] = 0
}
rownames(cancer_mat) = genes[cancer_ix]
colnames(cancer_mat) = colnames(cisplatin.dat)
}
gene_ix = match(genes,rownames(cisplatin.dat))
#gene_ix = match(genes,dat_genes)
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
if(length(cancer_ix)>0)
{
pre_dat = rbind(pre_dat,cancer_mat)
}
resp = cisplatin.info$response[match(colnames(cisplatin.dat),cisplatin.info$patient)]
resp = as.vector(resp)
resp_sort = sort(resp,index=T)
resp = resp_sort$x
pre_dat = pre_dat[,resp_sort$ix]
pats_cancer = pats_cancer[resp_sort$ix]
final_dat = pre_dat
###draw heatmap###
#heatmap#
colAnno = data.frame(IC50=resp,cancer=pats_cancer)
row_lab = rownames(final_dat)
aheatmap(final_dat,annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F,scale="r1")
#in each cancer heatmap
# cancer_type = unique(pats_cancer)
# i = 4
# ix = which(pats_cancer==cancer_type[i])
# colAnno = data.frame(response=resp[ix],cancer=pats_cancer[ix])
# aheatmap(final_dat[,ix],annCol=colAnno,hclustfun='average', Colv = NA, labRow=row_lab,
#          distfun=function(x) as.dist((1-cor(t(x)))/2),legend=F)
##analyse some genes##
# gene = "MAGEA4"
# df = data.frame(pats_cancer,resp,
#                 t(final_dat[match(gene,rownames(final_dat)),]))
# colnames(df) = c("cancer","response",gene)
# ggplot(df,aes(y=MAGEA4,x=cancer)) + geom_boxplot(aes(fill=response))
#geom_violin(aes(fill=response),alpha=1,width=1)
#+ geom_jitter(aes(fill=response))+ +
#cc = c(rep("#FF0000FF",length(sen_ix)),rep("#CCFF00FF",times=ncol(pre_dat)-length(sen_ix)))
# cc = vector(mode="character",length=length(resp))
# cc[resp=="non-responder"] = "#CCFF00FF"
# cc[resp=="responder"] = "#FF0000FF"
# exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,,
#                         ColSideColors=cc,col=cm.colors(255),labCol = NA,
#                         hclust=function(x) hclust(x,method="average"),
#                         distfun=function(x) as.dist((1-cor(t(x)))/2))
##NMF##
#non-negative matrix factorization#
# final_dat = t(2^final_dat)
# res.estimate = nmf(t(final_dat),2:10,nrun=10,seed=123456)
# plot(res.estimate)
# res = nmf(t(final_dat),3)
# basismap(res)
# coefmap(res,annCol=colAnno)
# consensusmap(res,annCol=colAnno)
dev.off()
