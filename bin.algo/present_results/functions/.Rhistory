library(pracma)
list.dirs
?list.dirs
?dir.create
list.dirs
?list.dirs
library(ggplo2)
library(ggplot2)
a = 1:100
ggplot(data=a)
idf = data.frame(x=a)
df = data.frame(x=a)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(y=..density..)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(y=density)
print(fig)
plot(fig)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(aes(y=..density..),alpha=0.3,colour='black')
print(fig)
a = rnorm(100)
df = data.frame(x=a)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(aes(y=..density..),alpha=0.3,colour='black')
print(fig)
fig = ggplot(data=df,aes(x=x)) + geom_histogram()
print(fig)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(alpha=0.3)
print(fig)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(alpha=0.3,colour='black',binwidth=x)
fig = ggplot(data=df,aes(x=x)) + geom_histogram(alpha=0.3,colour='black',aes(binwidth=x))
print(fig)
?geom_histogram
fig = ggplot(data=df,aes(x=x)) + geom_histogram(alpha=0.3,colour='black',binwidth=0.1)
print(fig)
fig + stat_density(geom='line',position='identify')
fig + stat_density(geom='line',position='identify',size=1.5)
fig + stat_density(geom='line',size=1.5)
geom_vline
?geom_vline
fig = ggplot(data=df,aes(x=x)) + geom_histogram(alpha=0.3,colour='black',binwidth=0.1)
fig + geom_vline(xintercept=auc)
auc=4
fig = ggplot(data=df,aes(x=x)) + geom_histogram(alpha=0.3,colour='black',binwidth=0.1)
fig + geom_vline(xintercept=auc)
list.dirs
info_file = "C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/miRNAseq/cisplatin.miRNAseq_fold_cv.mat.txt"
pan_path = "C:/Users/zding/workspace/projects/drug_sensitivity/results/cisplatin/miRNA/elastic_net/wilcox.no_cancer/performance/whole_genome.0.05/"
sin_path = "C:/Users/zding/workspace/projects/drug_sensitivity/results/cisplatin/miRNA/elastic_net/wilcox.no_cancer/performance/cesc.whole_genome.0.05/"
core.cancer = "CESC"
pdf_file = "tmp.pdf"
drug = "cisplatin"
data_type = "miRNA"
source("source_all.R")
pan.files = list.files(path=pan_path,full.names=T,pattern=pan_pattern)
pan_score = lapply(pan.files,read_table)
filenames = lapply(pan.files,find_name)
names(pan_score) = filenames
sin.files = list.files(path=sin_path,full.names=T,pattern=single_pattern)
sin_score = lapply(sin.files,read_table)
filenames = lapply(sin.files,find_name)
names(sin_score) = filenames
cisplatin.info = read.table(info_file,header=T,quote="",sep="\t")
core.pats = as.character(cisplatin.info$patient[cisplatin.info$cancer == core.cancer])
pan_pattern = "pan.elanet.mid_res.test_[0-9]*.20150701.txt"
single_pattern = pan_pattern
source("source_all.R")
##both##
pan.files = list.files(path=pan_path,full.names=T,pattern=pan_pattern)
pan_score = lapply(pan.files,read_table)
filenames = lapply(pan.files,find_name)
names(pan_score) = filenames
sin.files = list.files(path=sin_path,full.names=T,pattern=single_pattern)
sin_score = lapply(sin.files,read_table)
filenames = lapply(sin.files,find_name)
names(sin_score) = filenames
cisplatin.info = read.table(info_file,header=T,quote="",sep="\t")
core.pats = as.character(cisplatin.info$patient[cisplatin.info$cancer == core.cancer])
###plot curves###
cl = makeCluster(no_cores)
registerDoParallel(cl)
pan_roc_res <- foreach( i=1:length(pan_score) ) %dopar%
{
#for glmnet, second class is target class
curr_pats_all = colnames(pan_score[[i]])
curr_pats_core = intersect(curr_pats_all,core.pats)
curr_pats_core.ix = match(curr_pats_core,curr_pats_all)
pan_score[[i]] = pan_score[[i]][ , curr_pats_core.ix]
curr_pats = colnames(pan_score[[i]])
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
#roc_res[[i]] = ensemble_roc(pan_score[[i]],resp,"sensitive")
return(ensemble_roc(pan_score[[i]],resp,"sensitive"))
}
stopImplicitCluster()
stopCluster(cl)
mode(pan_roc_res)
pan_roc_res[[1]]
mode(pan_roc_res[[1]])
is.matrix(pan_roc_res[[1]])
pan_auc = lapply(pan_roc_res,function(x){xval=x[[1]][,2];
yval=x[[1]][,1];
return(trapz(xval,yval))})
a = pan_roc_res[[1]]
is.matrix(a)
pan_auc = lapply(pan_roc_res,function(x){xval=x[,2];
yval=x[,1];
return(trapz(xval,yval))})
pan_auc = unlist(pan_auc)
boxplot(pan_auc)
