measure="sd" )
title(NULL,"Vertical average; Std bar")
pan_on_single.roc = ave_roc(  pan_roc_res,type="vertical",
paste("Performance of Pan-cancer model on ",
core.cancer,sep=""),
measure="quantile" )
title(NULL,"Vertical average; quantile")
data = pan_roc_res
type= "vertical"
measure = "quantile"
title_str = "test"
library(pracma)
data_num = length(data)
fpr_fix = seq(0,1,by=0.01)
fpr_fix.sd_ix = seq(11,91,by=10)
#tpr points
tpr_fix = vector(length=length(fpr_fix),
mode="numeric")
tpr_fix.sd = vector(mode="numeric",
length=length(fpr_fix.sd_ix))
#calculate fpr
fpr_fix.mat = matrix(NA,nrow=length(fpr_fix),
ncol=data_num)
for( i in 1:data_num )
{
for( j in 2:(length(fpr_fix)-1) )
{
ix = which(data[[i]][,2]==fpr_fix[j])
if( length(ix)>0 )
{
fpr_fix.mat[j,i] = max(data[[i]][ix,1])
}
if( length(ix)==0)
{
val = abs( data[[i]][,2]-fpr_fix[j] )
ix = which( val == min(val) )
curr_val = unique(data[[i]][ix,2])
if( length(curr_val)>1)
{
x1 = data[[i]][max(which(data[[i]][,2]==curr_val[1])),2]
y1 = data[[i]][max(which(data[[i]][,2]==curr_val[1])),1]
x2 = data[[i]][min(which(data[[i]][,2]==curr_val[2])),2]
y2 = data[[i]][min(which(data[[i]][,2]==curr_val[2])),1]
y = (y2-y1)/(x2-x1)*fpr_fix[j]
y = y + y2 - (y2-y1)/(x2-x1)*x2
fpr_fix.mat[j,i] = y
}
if( length(curr_val)==1)
{
if(curr_val<fpr_fix[j])
{
if( length(ix) > 1)
{
ix = max(ix)
}
y1 = data[[i]][ix,1]
x1 = data[[i]][ix,2]
y2 = data[[i]][ix+1,1]
x2 = data[[i]][ix+1,2]
y = (y2-y1)/(x2-x1)*fpr_fix[j]
y = y + y2 - (y2-y1)/(x2-x1)*x2
fpr_fix.mat[j,i] = y
}
if( curr_val>fpr_fix[j] )
{
if( length(ix) > 1)
{
ix = min(ix)
}
y1 = data[[i]][ix-1,1]
x1 = data[[i]][ix-1,2]
y2 = data[[i]][ix,1]
x2 = data[[i]][ix,2]
y = (y2-y1)/(x2-x1)*fpr_fix[j]
y = y + y2 - (y2-y1)/(x2-x1)*x2
fpr_fix.mat[j,i] = y
}
}
}
}
}
fpr_fix.mat[1,] = 0
fpr_fix.mat[nrow(fpr_fix.mat),] = 1
tpr_fix = rowMeans( fpr_fix.mat )
for( i in 1:length(fpr_fix.sd_ix) )
{
tpr_fix.sd[i] = sd(fpr_fix.mat[fpr_fix.sd_ix[i],])
}
tpr_quantile = t( apply(fpr_fix.mat,1,quantile) )
plot(fpr_fix, tpr_fix, "l",
xlim=c(0,1), ylim=c(0,1),
xlab="False Positive Rate",
ylab="True Positive Rage",
main=title_str)
lines(seq(0,1,0.1),seq(0,1,0.1),lty=2,col="gray")
segments(fpr_fix[fpr_fix.sd_ix],tpr_fix[fpr_fix.sd_ix]-tpr_fix.sd,
fpr_fix[fpr_fix.sd_ix],tpr_fix[fpr_fix.sd_ix]+tpr_fix.sd)
epsilon = 0.01
segments(fpr_fix[fpr_fix.sd_ix]-epsilon,tpr_fix[fpr_fix.sd_ix]-tpr_fix.sd,
fpr_fix[fpr_fix.sd_ix]+epsilon,tpr_fix[fpr_fix.sd_ix]-tpr_fix.sd)
segments(fpr_fix[fpr_fix.sd_ix]-epsilon,tpr_fix[fpr_fix.sd_ix]+tpr_fix.sd,
fpr_fix[fpr_fix.sd_ix]+epsilon,tpr_fix[fpr_fix.sd_ix]+tpr_fix.sd)
View(tpr_quantile)
plot(fpr_fix,tpr_quantile[,3],"l",
xlim=c(0,1),ylim=c(0,1),
xlab="False Positive Rate",
ylab="True Positive Rage",
main=title_str)
lines(seq(0,1,0.1),seq(0,1,0.1),lty=2,col="gray")
segments(fpr_fix[fpr_fix.sd_ix],
tpr_quantile[fpr_fix.sd_ix,2],
fpr_fix[fpr_fix.sd_ix],
tpr_quantile[fpr_fix.sd_ix,4])
View(tpr_quantile[fpr_fix.sd_ix,])
pan_on_single.roc = ave_roc(  pan_roc_res,type="threshold",
paste("Performance of Pan-cancer model on ",
core.cancer,sep=""),
measure="quantile" )
title(NULL,"Threshold average; std bar")
cl = makeCluster(no_cores)
registerDoParallel(cl)
sin_roc_res <- foreach( i=1:length(sin_score) ) %dopar%
{
#for glmnet, second class is target class
curr_pats = names(sin_score[[i]])
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
# roc_res[[i]] = ensemble_roc(sin_score[[i]],resp,"sensitive")
return( ensemble_roc(sin_score[[i]],resp,"insensitive") )
}
stopImplicitCluster()
stopCluster(cl)
single.roc = ave_roc(sin_roc_res,type="vertical",
paste("Performance of single-cancer model on ",
core.cancer,sep=""),
meansure="sd")
title(NULL,"Vertical average; Std bar")
single.roc = ave_roc(sin_roc_res,type="vertical",
paste("Performance of single-cancer model on ",
core.cancer,sep=""),
meansure="quantile")
title(NULL,"Vertical average; Std bar")
single.roc = ave_roc(sin_roc_res,type="threshold",
paste("Performance of single-cancer model on ",
core.cancer,sep=""),
meansure="threshold")
title(NULL,"Vertical average; threshold")
single.roc = ave_roc(sin_roc_res,type="vertical",
paste("Performance of single-cancer model on ",
core.cancer,sep=""),
measure="sd")
title(NULL,"Vertical average; Std bar")
single.roc = ave_roc(sin_roc_res,type="vertical",
paste("Performance of single-cancer model on ",
core.cancer,sep=""),
measure="quantile")
title(NULL,"Vertical average; Std bar")
single.roc = ave_roc(sin_roc_res,type="threshold",
paste("Performance of single-cancer model on ",
core.cancer,sep=""),
measure="threshold")
title(NULL,"Vertical average; threshold")
pan_on_single.roc = ave_roc(  pan_roc_res,type="vertical",
paste("Performance of Pan-cancer model on ",
core.cancer,sep=""),
measure="quantile" )
title(NULL,"Vertical average; quantile")
pan_xy = pan_on_single.roc[[1]]
sin_xy = single.roc[[1]]
plot(pan_xy[,2],pan_xy[,1],col="blue",
xlim=c(0,1),ylim=c(0,1),xlab="FPR",ylab="TPR",
main= paste("Pan-cancer VS ",core.cancer,sep=""),"l" )
lines(sin_xy[,2],sin_xy[,1],col="red","l")
lines(seq(0,1,by=0.1),seq(0,1,by=0.1),lty=2,col="gray")
legend("topleft",legend=c("pan-cancer",core.cancer,"random"),
lty=c(1,1,2),col=c("blue","red","gray"))
title(NULL,"Vertical average")
cl = makeCluster(no_cores)
registerDoParallel(cl)
pan_cancer_res<-foreach(i=1:length(pan_score)) %dopar%
{
curr_pats = names(pan_score[[i]])
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
#error_res[[i]] = identify_class(pan_score[[i]],resp,"sensitive")
return( identify_class(pan_score[[i]],resp,"insensitive") )
}
stopImplicitCluster()
stopCluster(cl)
pan_error = error_calc(pan_cancer_res,cisplatin.info,core.cancer=core.cancer)
#single cancer resutls#
cl = makeCluster(no_cores)
registerDoParallel(cl)
single_cancer_res <- foreach(i=1:length(sin_score)) %dopar%
{
curr_pats = names(sin_score[[i]])
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
#error_res[[i]] = identify_class(sin_score[[i]],resp,"sensitive")
return( identify_class(sin_score[[i]],resp,"insensitive") )
}
stopImplicitCluster()
stopCluster(cl)
sin_error = error_calc(single_cancer_res,cisplatin.info,core.cancer=core.cancer)
i
i=1
curr_pats = names(pan_score[[i]])
curr_pats
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
resp
identify_class(pan_score[[i]],resp,"insensitive")
identify_class <- function(score_vec,class,target_class,cutoff=0.5)
{
#score_mat: column as patients
#target class: probability larger than 0.5
#mat = matrix( 0,nrow=nrow(score_mat),ncol=ncol(score_mat) )
#mat[score_mat>=cutoff] = 1
#vec = colMeans(mat)
vec = score_vec
class_1 = target_class
class_2 = setdiff(unique(class),class_1)
pred = vector(length=length(vec),mode="character")
pred[vec>=0.5] = class_1
pred[vec< 0.5] = class_2
indict = pred==class
df = data.frame(class,pred,indict)
colnames(df) = c("true","pred","indicator")
rownames(df) = names(score_vec)
mytable = table(pred,class)
fdr = mytable[1,2]/sum(mytable[1,])
#return(list(df,fdr))
return(df)
}
identify_class(pan_score[[i]],resp,"insensitive")
cl = makeCluster(no_cores)
registerDoParallel(cl)
pan_cancer_res<-foreach(i=1:length(pan_score)) %dopar%
{
curr_pats = names(pan_score[[i]])
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
#error_res[[i]] = identify_class(pan_score[[i]],resp,"sensitive")
return( identify_class(pan_score[[i]],resp,"insensitive") )
}
stopImplicitCluster()
stopCluster(cl)
pan_error = error_calc(pan_cancer_res,cisplatin.info,core.cancer=core.cancer)
#single cancer resutls#
cl = makeCluster(no_cores)
registerDoParallel(cl)
single_cancer_res <- foreach(i=1:length(sin_score)) %dopar%
{
curr_pats = names(sin_score[[i]])
resp = as.character( cisplatin.info$response[ match( curr_pats, as.character(cisplatin.info$patient) ) ] )
#error_res[[i]] = identify_class(sin_score[[i]],resp,"sensitive")
return( identify_class(sin_score[[i]],resp,"insensitive") )
}
stopImplicitCluster()
stopCluster(cl)
sin_error = error_calc(single_cancer_res,cisplatin.info,core.cancer=core.cancer)
error_calc <- function(data, info,core.cancer)
{
#data as a list of matrice
#each matrix: row as samples, column as true class, prediciton,etc
#info: all information of patients by the drug
#debug
#data = error_res ; info = cisplatin.info
test_num = length(data)
res_list = list()
all_cancer = c()
for(K in 1:test_num)
{
patients = rownames(data[[K]])
cancers = as.character( info$cancer[ match(patients,as.character(info$patient)) ] )
#cancer_type = unique( cancers )
cancer_type = core.cancer
#sen_vec = vector( mode="numeric",length=length(cancer_type) )
#insen_vec = vector( mode="numeric", length=length(cancer_type) )
ix = which( cancers==cancer_type )
curr_dat = data[[K]][ix,]
#specifity
sen = sum(curr_dat$indicator[curr_dat$true=="sensitive"]==T)
sen_all = sum(curr_dat$true=="sensitive")
sen_wrong = sen/sen_all
#sensitivity
insen = sum(curr_dat$indicator[curr_dat$true=="insensitive"]==T)
insen_all = sum(curr_dat$true=="insensitive")
insen_wrong = insen/insen_all
sen_vec = sen_wrong
insen_vec = insen_wrong
curr_res = cbind(sen_vec,insen_vec)
rownames(curr_res) = cancer_type
colnames(curr_res) = c("specificity","sensitivity")
res_list[[K]] = curr_res
all_cancer  = union(all_cancer,cancer_type)
}
#pool all results
all_cancer = unique(all_cancer)
final_res = matrix(NA,nrow=2*length(all_cancer),ncol=test_num)
rownames(final_res) = rep(all_cancer,each=2)
resp_vec = rep(c("Specificity","Sensitivity"),times=length(all_cancer))
for(K in 1:test_num)
{
curr_res = res_list[[K]]
cancer_type = rownames(curr_res)
for( i in 1:nrow(curr_res) )
{
cancer_ix = match(cancer_type[i],rownames(final_res))
final_res[cancer_ix,K] = curr_res[i,1]
final_res[cancer_ix+1,K] = curr_res[i,2]
}
}
final = data.frame(rownames(final_res),resp_vec,final_res[,1])
colnames(final) = c("cancer","Type","value")
for(K in 2:test_num)
{
tmp = data.frame(rownames(final_res),resp_vec,final_res[,K])
colnames(tmp) = c("cancer","Type","value")
final = rbind( final,tmp )
}
#boxplot
library(ggplot2)
ggplot( aes(y=value,x=cancer),data=final ) +
geom_boxplot(aes(fill=Type)) +
geom_point(position=position_dodge(width=0.75), aes(fill=Type)) +
ggtitle("Performance in Single Cancer") +
xlab("cancer types") +
theme_set(theme_gray(base_size=25))
return(final)
}
sin_error = error_calc(single_cancer_res,cisplatin.info,core.cancer=core.cancer)
pan_error = error_calc(pan_cancer_res,cisplatin.info,core.cancer=core.cancer)
pan_error[,1] = "pan-cancer"
sin_error[,1] = "single-cancer"
all_error = rbind(pan_error,sin_error)
library(ggplot2)
ggplot( aes(y=value,x=cancer),data=all_error ) +
geom_boxplot(aes(fill=Type)) +
geom_point(position=position_dodge(width=0.75), aes(fill=Type)) +
ggtitle(paste("Performance Comparison on ",core.cancer,sep="")) +
xlab("cancer types") +
theme_set(theme_gray(base_size=20))
install.packages("ggdendro")
genes_pre = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/results/omics_feature/mRNAseq/elastic_net/pool/pan.elanet.feature.full_data.20150701.txt",
header=F,row.names=1,sep="\t",quote="")
genes_pre = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/bin.algo/mRNASeq/elastic_net.logistic/pan.elanet.feature.full.20150701.txt",
header=F,row.names=1,sep="\t",quote="")
cisplatin.dat = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/mRNAseq/cisplatin.mRNAseq.gdac_20141206.preprocess.txt",
header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/mRNAseq/cisplatin.mRNAseq_fold_cv.mat.txt",
sep="\t",header=T,quote="")
core.info = cisplatin.info
train.pats = as.character(core.info$patient)
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info
genes = rownames(genes_pre)[genes_pre[,1]>=0.8]
gene_ix = match(genes,rownames(cisplatin.dat))
gene_ix = gene_ix[!is.na(gene_ix)]
gene_ix
pre_dat = cisplatin.dat[gene_ix,]
sen_pats = as.character(cisplatin.info$patient[cisplatin.info$response=="sensitive"])
sen_ix = match(sen_pats,colnames(pre_dat))
final_dat = cbind(pre_dat[,sen_ix],pre_dat[,-sen_ix])
resp = c(rep("responder",length(sen_ix)),rep("no-responder",times=ncol(pre_dat)-length(sen_ix)))
cc = c(rep("#FF0000FF",length(sen_ix)),rep("#CCFF00FF",times=ncol(pre_dat)-length(sen_ix)))
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=F,Colv=F,scale="none",key=F,
ColSideColors=cc,col=cm.colors(255),labCol = NA)
library(heatmap)
library(heatmap2)
?heatmap.2
###libraries###
library(reshape2)
library(ggplot2)
library(plyr)
library(gplots)
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=F,Colv=F,scale="none",key=F,
ColSideColors=cc,col=cm.colors(255),labCol = NA)
?heatmap.2
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="row",key=T,
ColSideColors=cc,col=greenred(10),labCol = NA)
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA)
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="row",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA)
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="col",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA)
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA)
View(final_dat)
TEST <- matrix(runif(100),nrow=20)
dim(TEST)
View(TEST)
exp_heatmap = heatmap.2(data.matrix(t(final_dat)),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
train.dat = impute_NA(train.dat,nrow(train.dat))
impute_NA <- function(train_dat,gene_num)
{
#input data: row as genes and col as samples
#output data:row as genes and col as samples
#usage: before glmnet function
curr_train = train_dat[1:gene_num,]
mean_nums = rowMeans( curr_train,na.rm=T )
for(i in 1:nrow(train_dat))
{
train_na = which( is.na(train_dat[i,]) )
if( length(train_na)>0)
{
curr_train[i,train_na] = mean_nums[i]
}
}
train_dat[1:gene_num,] = curr_train
return(train_dat)
}
train.dat = impute_NA(train.dat,nrow(train.dat))
train.dat = impute_NA(final_dat,nrow(final_dat))
exp_heatmap = heatmap.2(data.matrix(t(final_dat)),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
View(final_dat)
final_dat = impute_NA(final_dat,nrow(final_dat))
exp_heatmap = heatmap.2(data.matrix(t(final_dat)),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
exp_heatmap = heatmap.2(data.matrix(t(final_dat)),Rowv=T,Colv=T,scale="none",key=T,
RowSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,
RowSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
genes = rownames(genes_pre)[genes_pre[,1]>=0.5]
gene_ix = match(genes,rownames(cisplatin.dat))
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
sen_pats = as.character(cisplatin.info$patient[cisplatin.info$response=="sensitive"])
sen_ix = match(sen_pats,colnames(pre_dat))
final_dat = cbind(pre_dat[,sen_ix],pre_dat[,-sen_ix])
##impute NAs##
final_dat = impute_NA(final_dat,nrow(final_dat))
resp = c(rep("responder",length(sen_ix)),rep("no-responder",times=ncol(pre_dat)-length(sen_ix)))
cc = c(rep("#FF0000FF",length(sen_ix)),rep("#CCFF00FF",times=ncol(pre_dat)-length(sen_ix)))
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
dim(final_dat)
genes = rownames(genes_pre)[genes_pre[,1]>=0.7]
gene_ix = match(genes,rownames(cisplatin.dat))
gene_ix = gene_ix[!is.na(gene_ix)]
pre_dat = cisplatin.dat[gene_ix,]
sen_pats = as.character(cisplatin.info$patient[cisplatin.info$response=="sensitive"])
sen_ix = match(sen_pats,colnames(pre_dat))
final_dat = cbind(pre_dat[,sen_ix],pre_dat[,-sen_ix])
##impute NAs##
final_dat = impute_NA(final_dat,nrow(final_dat))
resp = c(rep("responder",length(sen_ix)),rep("no-responder",times=ncol(pre_dat)-length(sen_ix)))
###draw heatmap###
cc = c(rep("#FF0000FF",length(sen_ix)),rep("#CCFF00FF",times=ncol(pre_dat)-length(sen_ix)))
exp_heatmap = heatmap.2(data.matrix(final_dat),Rowv=T,Colv=T,scale="none",key=T,
ColSideColors=cc,col=cm.colors(255),labCol = NA,
hclust=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2))
###libraries###
library(reshape2)
library(ggplot2)
library(plyr)
library(gplots)
###functions###
impute_NA <- function(train_dat,gene_num)
{
#input data: row as genes and col as samples
#output data:row as genes and col as samples
#usage: before glmnet function
curr_train = train_dat[1:gene_num,]
mean_nums = rowMeans( curr_train,na.rm=T )
for(i in 1:nrow(train_dat))
{
train_na = which( is.na(train_dat[i,]) )
if( length(train_na)>0)
{
curr_train[i,train_na] = mean_nums[i]
}
}
train_dat[1:gene_num,] = curr_train
return(train_dat)
}
###load data###
#setwd("bin.algo/present_results")
genes_pre = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/bin.algo/mRNASeq/elastic_net.logistic/pan.elanet.feature.full.20150701.txt",
header=F,row.names=1,sep="\t",quote="")
cisplatin.dat = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/mRNAseq/cisplatin.mRNAseq.gdac_20141206.preprocess.txt",
header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/mRNAseq/cisplatin.mRNAseq_fold_cv.mat.txt",
sep="\t",header=T,quote="")
core.info = cisplatin.info
train.pats = as.character(core.info$patient)
train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)
train.info = core.info
##filter lowly expressed genes##
# train.dat = filter_mRNA(cisplatin.dat, train.pats ,
#                         low.thresh="Q1", type="dispersion" )
##normalization in each cancer##
#train.dat = exp_norm( train.dat, train.pats, cisplatin.info)
sen_pats = as.character(cisplatin.info$patient[cisplatin.info$response=="sensitive"])
sen_ix = match(sen_pats,colnames(pre_dat))
sen_ix = match(sen_pats,colnames(cisplatin.dat))
cisplatin.dat = impute_NA(cisplatin.dat,nrow(cisplatin.dat))
