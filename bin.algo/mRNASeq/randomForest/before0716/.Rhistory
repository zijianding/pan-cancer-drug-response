####functions###
bootstrap_sample <- function(obs,class,BS,method){
#this function only generates BS samples
#in each sample, two classes are balanced; or supply the minority class
#the sample size equals to the number of obs(+1/-1 due to odd-even)
#return a list
#NOTICE: the observations can NOT be numeric!!!
if( is.numeric(obs) )
{
print("The observation can NOT be numeric!")
}
resp = unique(class)
pos_obs = obs[class==resp[2]]
neg_obs = obs[class==resp[1]]
if(method=="balance")
{
sample.num = round((length(pos_obs)+length(neg_obs))/2)
bs_mat.sample = matrix(ncol=BS,nrow=(2*sample.num))
bs_mat.resp = matrix(ncol=BS,nrow=(2*sample.num))
for(bs in 1:BS)
{
#sample positive observations
sample_pos = sample(pos_obs,size=sample.num,replace=T)
sample_pos_resp = class[match(sample_pos,obs)]
#sample_pos_resp = as.character( train.info$response[match(sample_pos,as.character(train.info$patient))] )
#sample negative observations
sample_neg = sample(neg_obs,size=sample.num,replace=T)
sample_neg_resp = class[match(sample_neg,obs)]
#sample_neg_resp = as.character( train.info$response[match(sample_neg,as.character(train.info$patient))] )
bs_mat.sample[,bs] = c(sample_pos,sample_neg)
bs_mat.resp[,bs] = c(sample_pos_resp,sample_neg_resp)
}
bs_mat = list(bs_mat.sample,bs_mat.resp)
return(bs_mat)
}
if(method=="supply")
{
#sample the minority class, make it equal to the majority
mino_class = resp[1] #neg_obs class
if(length(neg_obs)>length(pos_obs))
{
mino_class = resp[2]
}
sample.num = length(obs) - 2*length(obs[class==mino_class])
bs_mat.sample = matrix( ncol=BS,nrow=(length(obs)+sample.num) )
bs_mat.resp = matrix(ncol=BS,nrow=length(obs)+sample.num)
for(bs in 1:BS)
{
sample.pats = sample(obs[class==mino_class],size=sample.num,replace=T)
sample.resp = rep(mino_class,times=sample.num)
bs_mat.sample[,bs] = c(obs,sample.pats)
bs_mat.resp[,bs] = c(class,sample.resp)
}
bs_mat = list(bs_mat.sample,bs_mat.resp)
return(bs_mat)
}
}
partition_data <- function(obs, k){
#k-fold partition of obs
cv.mat = matrix("NULL",nrow=length(obs),ncol=k)
fd.size = floor(length(obs)/k)
tmp = length(obs)%%k
if(tmp>0)
{
fd.ix = rep(1:tmp,each = (fd.size+1))
fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))
}
if(tmp==0)
{
fd.ix = rep(1:k,each=fd.size)
}
for( j in 1:k)
{
cv.mat[fd.ix!=j,j] = "train"
cv.mat[fd.ix==j,j] = "validation"
}
rownames(cv.mat) = obs
return(cv.mat)
}
####functions###
bootstrap_sample <- function(obs,class,BS,method){
#this function only generates BS samples
#in each sample, two classes are balanced; or supply the minority class
#the sample size equals to the number of obs(+1/-1 due to odd-even)
#return a list
#NOTICE: the observations can NOT be numeric!!!
if( is.numeric(obs) )
{
print("The observation can NOT be numeric!")
}
resp = unique(class)
pos_obs = obs[class==resp[2]]
neg_obs = obs[class==resp[1]]
if(method=="balance")
{
sample.num = round((length(pos_obs)+length(neg_obs))/2)
bs_mat.sample = matrix(ncol=BS,nrow=(2*sample.num))
bs_mat.resp = matrix(ncol=BS,nrow=(2*sample.num))
for(bs in 1:BS)
{
#sample positive observations
sample_pos = sample(pos_obs,size=sample.num,replace=T)
sample_pos_resp = class[match(sample_pos,obs)]
#sample_pos_resp = as.character( train.info$response[match(sample_pos,as.character(train.info$patient))] )
#sample negative observations
sample_neg = sample(neg_obs,size=sample.num,replace=T)
sample_neg_resp = class[match(sample_neg,obs)]
#sample_neg_resp = as.character( train.info$response[match(sample_neg,as.character(train.info$patient))] )
bs_mat.sample[,bs] = c(sample_pos,sample_neg)
bs_mat.resp[,bs] = c(sample_pos_resp,sample_neg_resp)
}
bs_mat = list(bs_mat.sample,bs_mat.resp)
return(bs_mat)
}
if(method=="supply")
{
#sample the minority class, make it equal to the majority
mino_class = resp[1] #neg_obs class
if(length(neg_obs)>length(pos_obs))
{
mino_class = resp[2]
}
sample.num = length(obs) - 2*length(obs[class==mino_class])
bs_mat.sample = matrix( ncol=BS,nrow=(length(obs)+sample.num) )
bs_mat.resp = matrix(ncol=BS,nrow=length(obs)+sample.num)
for(bs in 1:BS)
{
sample.pats = sample(obs[class==mino_class],size=sample.num,replace=T)
sample.resp = rep(mino_class,times=sample.num)
bs_mat.sample[,bs] = c(obs,sample.pats)
bs_mat.resp[,bs] = c(class,sample.resp)
}
bs_mat = list(bs_mat.sample,bs_mat.resp)
return(bs_mat)
}
}
partition_data <- function(obs, k){
#k-fold partition of obs
cv.mat = matrix("NULL",nrow=length(obs),ncol=k)
fd.size = floor(length(obs)/k)
tmp = length(obs)%%k
if(tmp>0)
{
fd.ix = rep(1:tmp,each = (fd.size+1))
fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))
}
if(tmp==0)
{
fd.ix = rep(1:k,each=fd.size)
}
for( j in 1:k)
{
cv.mat[fd.ix!=j,j] = "train"
cv.mat[fd.ix==j,j] = "validation"
}
rownames(cv.mat) = obs
return(cv.mat)
}
cisplatin.dat = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/mRNAseq/cisplatin.mRNAseq.gdac_20141206.preprocess.txt",
header=T,row.names=1,sep="\t",quote="")
cisplatin.info = read.table("C:/Users/zding/workspace/projects/drug_sensitivity/data/omics.drug_centric/mRNAseq/cisplatin.mRNAseq_fold_cv.mat.txt",
sep="\t",header=T,quote="")
test_fold=1
core.cancer = "CESC"
test_fold = test_fold + 3
#for debug
tmp_str = paste("The",test_fold-3,"test of Cancer",core.cancer,sep=" ")
print(tmp_str)
#
#libraries
library(randomForest)
library(PRROC)
library(doParallel)
library(foreach)
no_cores = detectCores()
other.cancer = setdiff(as.character(unique(cisplatin.info$cancer)),core.cancer)
core.info = cisplatin.info[as.character(cisplatin.info$cancer)==core.cancer,]
#find the test sample, and classes of each observation
#test data
test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])=="test"])
test.info = core.info[as.character(core.info[,test_fold])=="test",]
test.dat = cisplatin.dat[,match(test.pats,colnames(cisplatin.dat))]
is.numeric(test.dat[,1])
is.numeric(test.dat[1,])
is.factor(test.dat[1,])
test.dat[1,]
